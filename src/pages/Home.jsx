import axios from "axios";
import { useState, useEffect, useRef } from "react";
import { useForm } from "react-hook-form";
import toast from "react-hot-toast";
import Swal from "sweetalert2";

function Home() {
  const [showChristmasMessage, setShowChristmasMessage] = useState(false);
  const [showGuideInfo, setShowGuideInfo] = useState(false);
  const [snowflakes, setSnowflakes] = useState([]);
  const treeRef = useRef(null);
  const { setValue } = useForm();

  // Hi·ªáu ·ª©ng l·∫Øc c√¢y th√¥ng
  useEffect(() => {
    const treeIcon = treeRef.current;
    if (treeIcon) {
      const handleMouseEnter = () => {
        treeIcon.classList.add("shake-animation");
        treeIcon.addEventListener("animationend", () => {
          treeIcon.classList.remove("shake-animation");
        });
      };
      treeIcon.addEventListener("mouseenter", handleMouseEnter);
      return () => {
        treeIcon.removeEventListener("mouseenter", handleMouseEnter);
      };
    }
  }, []);

  // T·∫°o hi·ªáu ·ª©ng tuy·∫øt r∆°i
  useEffect(() => {
    const generateSnowflakes = () => {
      const flakes = [];
      for (let i = 0; i < 50; i++) {
        const size = Math.random() * 10 + 5;
        flakes.push({
          id: i,
          size: size,
          left: `${Math.random() * 100}vw`,
          animationDuration: `${Math.random() * 2 + 3}s`,
          animationDelay: `${Math.random() * 20}s`,
        });
      }
      setSnowflakes(flakes);
    };

    generateSnowflakes();
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      toast("·∫§n v√†o c√¢y th√¥ng Noel ƒë·ªÉ g·ª≠i l·ªùi ch√∫c cho t·ªõ nh√©!!", {
        icon: "üíå",
        style: {
          backgroundColor: "#a5d6a7",
          color: "red",
          textAlign: "center",
        },
      });
    }, 30000);

    return () => clearInterval(interval);
  });

  const onSubmit = async (data) => {
    try {
      await axios
        .post(`http://localhost:3000/friendWishes`, data)
        .then((response) => {
          Swal.fire({
            title: "G·ª≠i th√†nh c√¥ng",
            text: "C·∫£m ∆°n v√¨ ƒë√£ d√†nh ch√∫t th·ªùi gian",
            icon: "success",
            confirmButtonText: "Bye",
            confirmButtonColor: "red",
          });
        });
    } catch (error) {
      console.log(error);
    }
  };

  const handleFormSubmit = () => {
    // Hi·ªÉn th·ªã SweetAlert2 modal v·ªõi hai input
    Swal.fire({
      title: "G·ª≠i l·ªùi ch√∫c cho MLinh",
      confirmButtonText: "G·ª≠i",
      confirmButtonColor: "red",
      html: `
        <form id="myForm">
          <input id="name" class="swal2-input" placeholder="Ghi r√µ t√™n ƒë·ªÉ t·ªõ bi·∫øt c·∫≠u" />
          <input id="wishes" class="swal2-input" placeholder="L·ªùi ch√∫c c·ªßa c·∫≠u..." />
        </form>
      `,
      focusConfirm: false,
      preConfirm: () => {
        // L·∫•y gi√° tr·ªã c·ªßa c√°c input t·ª´ SweetAlert2 modal
        const name = document.getElementById("name").value;
        const wishes = document.getElementById("wishes").value;

        // C·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa form qua React Hook Form
        setValue("name", name);
        setValue("wishes", wishes);

        // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa form tr∆∞·ªõc khi ti·∫øp t·ª•c
        if (!name || !wishes) {
          Swal.showValidationMessage("ƒê·ª´ng b·ªè tr·ªëng nh√©!!!");
          return false;
        }
        return { name, wishes }; // Tr·∫£ v·ªÅ gi√° tr·ªã khi form h·ª£p l·ªá
      },
    }).then((result) => {
      if (result.isConfirmed) {
        const { name, wishes } = result.value;
        onSubmit({ name, wishes });
      }
    });
  };

  return (
    <div>
      <main>
        {/* Hi·ªáu ·ª©ng tuy·∫øt r∆°i */}
        <div className="snowflakes">
          {snowflakes.map((flake) => (
            <div
              key={flake.id}
              className="snowflake"
              style={{
                width: `${flake.size}px`,
                height: `${flake.size}px`,
                left: flake.left,
                animationDuration: flake.animationDuration,
                animationDelay: flake.animationDelay,
              }}
            />
          ))}
        </div>

        {/* √Çm thanh Gi√°ng Sinh */}
        <audio id="audio" src="./giangsinh.mp3" autoPlay loop />

        {/* Th√¥ng ƒëi·ªáp Gi√°ng Sinh */}
        {showChristmasMessage || (
          <div id="as" className="christmas-message">
            Merry Christmas
          </div>
        )}

        {/* C√¢y th√¥ng */}
        <div className="tree-container" onClick={handleFormSubmit}>
          <img
            ref={treeRef}
            src="https://github.com/Panbap/datapanbap/blob/main/image/big_tree.png?raw=true"
            alt="C√¢y th√¥ng"
            className="tree-icon"
          />
        </div>

        {/* N√∫t hi·ªÉn th·ªã thi·ªáp */}
        {!showGuideInfo && (
          <div className="container">
            <button
              onClick={() => {
                setShowChristmasMessage(!showChristmasMessage);
                setShowGuideInfo(true);
              }}
              id="showButton"
            >
              Qu√† c·ªßa MLinh
            </button>
          </div>
        )}

        {/* Thi·ªáp h∆∞·ªõng d·∫´n */}
        {showGuideInfo && (
          <div id="guideInfo" className="guide-info">
            <button
              onClick={() => {
                setShowChristmasMessage(!showChristmasMessage);
                setShowGuideInfo(false);
              }}
              id="closeButton"
              className="close-btn"
            >
              X
            </button>
            <div id="ax" className="card">
              <div className="imgBox">
                <div className="bark" />
                <img src="https://github.com/Panbap/datapanbap/blob/main/image/mery.png?raw=true" />
              </div>
              <div className="details">
                <h3 className="h3 color fw-bold">MERRY CHRISTMAS</h3>
                <p>
                  Gi√°ng Sinh ƒë·∫øn r·ªìi. <br />
                  Ch√∫c b·∫°n m√πa l·ªÖ gi√°ng sinh ·∫•m √°p v√†o ng·ªçt ng√†o b√™n gia ƒë√¨nh v√†
                  nh·ªØng ng∆∞·ªùi y√™u th∆∞∆°ng. Ch√∫c b·∫°n lu√¥n ƒë·∫πp trai, xinh g√°i. Ch√∫c
                  b·∫°n lu√¥n gi·ªØ n·ª• c∆∞·ªùi t∆∞∆°i tr√™n m√¥i. G·∫∑t h√°i ƒë∆∞·ª£c nhi·ªÅu th√†nh
                  c√¥ng, di h·ªçc th√¨ s·∫Ω c√≥ nhi·ªÅu ƒëi·ªÉm t·ªët, ƒëi l√†m th√¨ s·∫Ω nh·∫≠n ƒë∆∞·ª£c
                  job ngon b·∫°n nh√©. C·∫£m ∆°n v√¨ ƒë√£ xu·∫•t hi·ªán v√† ƒë·ªìng h√†nh c√πng t·ªõ
                  trong 1 qu√£ng th·ªùi gian c√≥ vui c√≥ bu·ªìn. C·∫£m ∆°n v√¨ ƒë√£ l√† 1 ph·∫ßn
                  ng·∫Øn trong cu·ªôc ƒë·ªùi c·ªßa t·ªõ. <br />
                  <small>P/s: ƒê·ª´ng qu√™n ch√∫c l·∫°i t√¥i nh√© !!</small>
                </p>
                <p className="text-right">Gi√°ng Sinh an l√†nh!</p>
                <p className="text-right">‚ô•From MLinh w luv‚ô•</p>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
}

export default Home;
